---
import { AppConfig } from '@/utils/AppConfig';
import QuizQuestionRating from '@/components/QuizQuestionRating.astro';
import { options, questions } from '@/utils/quiz';

export interface Props {
  index: number;
  question: string;
}

const { question, index } = Astro.props as Props;

const showBack = index >= 0;

const progress = Math.ceil(((index + 1) / questions.length) * 100);

const radioElementName = `question-radio-${index}`;

const buttonCls = "m-auto grow w-full inline-flex items-center rounded-lg bg-blue-700 px-3 py-2 text-center text-sm font-medium text-white hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 cursor-pointer"
const backButtonCls = `text-center grow w-full inline-flex items-center rounded-lg px-3 py-2 text-center text-sm font-medium
focus:z-10 focus:outline-none focus:ring-4 focus:ring-gray-100 cursor-pointer text-blue-900 dark:text-white
border border-gray-200 bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-400 dark:border-gray-600 dark:focus:ring-gray-700`;
---
<div class="max-w-4xl rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-700 dark:bg-gray-800">
    <div class="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">
      <div class="bg-blue-600 h-2.5 rounded-full" style={`width: ${progress}%`}></div>
    </div>
    <a href="#">
        <h5 class="mb-2 pt-4 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">
          Question #{index + 1}
        </h5>
    </a>
    <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">
      Please rate how much the following symptom applies to you.
      <br />
      Remember to focus on the most recent weeks.
    </p>
    <p class="mb-3 rounded-lg border border-blue-200 bg-blue-200/25 p-4 text-center font-bold text-gray-700 dark:text-white max-w-md">
      {question}
    </p>
    <div class="pb-8">
      <QuizQuestionRating elementName={radioElementName}/>
    </div>
    <div class="flex flex-row justify-between gap-2">
    {showBack && (
      <back-button data-last-page={`${AppConfig.base}/quiz/${index}/`} class="grow w-full">
        <div class={backButtonCls}>
          <p class="m-auto">Back</p>
        </div>
      </back-button>
    )}
    <next-question data-next-page={`${AppConfig.base}/quiz/${index + 2}/`} data-index={index} data-radio-element-name={radioElementName} data-options={JSON.stringify(options)} class="grow w-full">
      <div class={buttonCls}>
        <p class="m-auto">Next</p>
      </div>
    </next-question>
    </div>
</div>
<script>
  import { serializeAnswer } from '@/utils/quiz';
  class NextQuestion extends HTMLElement {
    connectedCallback() {
      const index = Number(this.dataset.index) || 0;
      const radioElementName = this.dataset.radioElementName || 'unknown';
      const nextPage = this.dataset.nextPage || window.location.href;
      const options = JSON.parse(this.dataset.options || '{}');

      console.log(`Connected el to index ${index} and ${radioElementName} and ${nextPage}`)

      const el = this.querySelector('div');
      if (el) {
        el.addEventListener('click', () => {
          this.answer(index, radioElementName, nextPage, options);
        });
      }
    }

    answer(index: number, radioElementName: string, nextPage: string, options: string) {
      const selector = `input[name="${radioElementName}"]:checked`;
      const checkedInput = document.querySelector(selector)
      const rating = checkedInput ? checkedInput.value : null;

      if (rating === null) {
        console.log(`Nothing selected for question ${index}`)
        return;
      }

      const ratingNumber = options[rating]

      console.log(`Selected rating '${rating}/${ratingNumber}' for question ${index}`)

      const params = new URLSearchParams(window.location.search);
      const answers = params.get('answers') || '';
      params.set('answers', serializeAnswer(answers, index, Number(ratingNumber || 0)))

      const url = new URL(window.location.origin + nextPage);
      url.search = params.toString();

      window.location.href = url.toString();
    }
  }

  class BackButton extends HTMLElement {
    connectedCallback() {
      const lastPage = this.dataset.lastPage || window.location.href;

      const el = this.querySelector('div');
      if (el) {
        el.addEventListener('click', () => {
          const params = new URLSearchParams(window.location.search);
          const url = new URL(window.location.origin + lastPage);
          url.search = params.toString();
          window.location.href = url.toString();
        });
      }
    }
  }

  customElements.define('next-question', NextQuestion);
  customElements.define('back-button', BackButton);
</script>
